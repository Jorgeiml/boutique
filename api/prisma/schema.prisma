// --- Connection & Client ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums ---
enum UserRole {
  ADMIN
  CASHIER
}

enum OrderStatus {
  PAID
  CANCELED
}

enum InvoiceStatus {
  PENDING
  SENT
  AUTHORIZED
  REJECTED
}

enum DocumentType {
  CI
  RUC
  PAS
}

enum StockReason {
  SALE
  PURCHASE
  ADJUST
  RETURN
  TRANSFER
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  OTHER
}

enum SriEnvironment {
  TEST
  PROD
}

// --- Models base ---
model Company {
  id    String @id @default(cuid())
  ruc   String @unique @db.VarChar(13)
  name  String
  estab String @db.VarChar(3)
  point String @db.VarChar(3)
  seq   Int    @default(1)

  users     User[]
  products  Product[]
  variants  Variant[]
  clients   Client[]
  orders    Order[]
  movements StockMovement[]
  payments  OrderPayment[]
  sessions  CashSession[]
  invoices  Invoice[]

  @@index([name])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(320)
  hash      String
  role      UserRole @default(ADMIN)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders   Order[]
  sessions CashSession[]

  @@index([companyId])
}

// --- Catálogo ---
model Product {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  name      String
  code      String? // opcional (muchas boutiques usan código en la variante)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variants Variant[]

  @@unique([companyId, code]) // único por compañía (acepta varios NULL)
  @@index([companyId, name])
}

model Variant {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  sku       String // requerido (lo que escaneas en POS)
  barcode   String? // EAN/UPC opcional
  color     String?
  size      String?
  price     Decimal  @db.Decimal(12, 2)
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  movements  StockMovement[]

  @@unique([companyId, sku])
  @@unique([companyId, barcode])
  @@index([productId])
}

// --- Clientes ---
model Client {
  id           String       @id @default(cuid())
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id])
  documentType DocumentType
  document     String
  name         String
  email        String?      @db.VarChar(320)
  phone        String?
  address      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  orders Order[]

  @@unique([companyId, document]) // documento único por compañía
  @@index([companyId, document])
}

// --- Ventas ---
model Order {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  clientId  String?
  client    Client? @relation(fields: [clientId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  subtotal  Decimal     @db.Decimal(12, 2)
  taxRate   Decimal     @db.Decimal(5, 2) // % IVA aplicado
  taxAmount Decimal     @db.Decimal(12, 2)
  total     Decimal     @db.Decimal(12, 2)
  status    OrderStatus @default(PAID)
  createdAt DateTime    @default(now())

  items    OrderItem[]
  invoice  Invoice?
  payments OrderPayment[]

  @@index([companyId, createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id])
  qty       Int
  price     Decimal @db.Decimal(12, 2) // precio unitario al momento de la venta
  lineTotal Decimal @db.Decimal(12, 2)

  @@index([orderId])
  @@index([variantId])
}

// --- Pagos y caja ---
model OrderPayment {
  id        String        @id @default(cuid())
  companyId String
  company   Company       @relation(fields: [companyId], references: [id])
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id])
  method    PaymentMethod
  amount    Decimal       @db.Decimal(12, 2)
  reference String?
  sessionId String?
  session   CashSession?  @relation(fields: [sessionId], references: [id])
  createdAt DateTime      @default(now())

  @@index([orderId])
  @@index([companyId, createdAt])
}

model CashSession {
  id            String    @id @default(cuid())
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  openingAmount Decimal   @db.Decimal(12, 2)
  closingAmount Decimal?  @db.Decimal(12, 2)
  notes         String?

  payments OrderPayment[]

  @@index([companyId, openedAt])
}

// --- Stock audit ---
model StockMovement {
  id        String      @id @default(cuid())
  companyId String
  company   Company     @relation(fields: [companyId], references: [id])
  variantId String
  variant   Variant     @relation(fields: [variantId], references: [id])
  qty       Int
  reason    StockReason
  refId     String?
  createdAt DateTime    @default(now())

  @@index([variantId, createdAt])
  @@index([companyId, createdAt])
}

// --- Factura electrónica ---
model Invoice {
  id            String          @id @default(cuid())
  orderId       String          @unique
  order         Order           @relation(fields: [orderId], references: [id])
  provider      String // "Ecuafact"
  status        InvoiceStatus   @default(PENDING)
  number        String?
  authorization String?
  accessKey     String? // claveAcceso SRI
  estab         String?         @db.VarChar(3)
  point         String?         @db.VarChar(3)
  sequential    Int?
  environment   SriEnvironment?
  xmlUrl        String?
  pdfUrl        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
}
